<templateSet group="Rocky">
  <template name="aloge" value="AppLog.INSTANCE.loge(false, &quot;$FileName$&quot;, &quot;$MethodName$&quot;, e, new Exception());" description="Error log with Applog#loge" toReformat="true" toShortenFQNames="true">
    <variable name="FileName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogek" value="AppLog.loge(false, &quot;$ClassName$&quot;, &quot;$MethodName$&quot;, e, Exception())" description="Error log with Applog#loge" toReformat="true" toShortenFQNames="true">
    <variable name="ClassName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogsk" value="AppLog.loge(true, &quot;$ClassName$&quot;, &quot;$MethodName$&quot;, $Statement$, Exception())" description="Object log with Applog#logs" toReformat="true" toShortenFQNames="true">
    <variable name="ClassName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogs" value="AppLog.INSTANCE.loge(true, &quot;$ClassName$&quot;, &quot;$MethodName$&quot;, $Statement$, new Exception());" description="Object log with Applog#logs" toReformat="true" toShortenFQNames="true">
    <variable name="ClassName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="kdoc" value=" /**&#10; * $Statement$&#10; */" description="add Kdoc implementation" toReformat="true" toShortenFQNames="true">
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
      <option name="KOTLIN_EXPRESSION" value="true" />
      <option name="KOTLIN_STATEMENT" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="alogt" value="AppLog.INSTANCE.loge(false, &quot;$FileName$&quot;, &quot;$MethodName$&quot;, throwable, new Exception());" description="Throwable log with Applog#logt" toReformat="true" toShortenFQNames="true">
    <variable name="FileName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogtk" value="AppLog.loge(false, &quot;$FileName$&quot;, &quot;$MethodName$&quot;, throwable, Exception())" description="Throwable log with Applog#logt" toReformat="true" toShortenFQNames="true">
    <variable name="FileName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="alogesk" value="val e = Exception($Statement$)&#10;AppLog.loge(false, &quot;$ClassName$&quot;, &quot;$MethodName$&quot;, e, e)" description="Error log with Applog#loge for custom exception" toReformat="true" toShortenFQNames="true">
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ClassName" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="MethodName" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="snack" value="Snackbar.make(binding.root, $Statement$, Snackbar.LENGTH_LONG).show()" description="Creates a normal Snackbar call with binding.root" toReformat="false" toShortenFQNames="true">
    <variable name="Statement" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="setupFrag" value="class $FragmentName$Fragment : CoreFragment&lt;Fragment$FragmentName$Binding&gt;() {&#10;    private val viewModel: $FragmentName$ViewModel by viewModels()&#10;&#10;    override fun createReference(view: View, savedInstanceState: Bundle?) {&#10;    }&#10;&#10;    override fun createBinding(&#10;        layoutInflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?,&#10;    ) = Fragment$FragmentName$Binding.inflate(layoutInflater, container, false)&#10;&#10;    override fun setListeners(isEnabled: Boolean) {&#10;    }&#10;&#10;    override fun getProgressBar(): LoaderBinding? = null&#10;}&#10;&#10;class $FragmentName$ViewModel : ViewModel() {&#10;}" description="sets up fragment with CoreFragment and ViewMode" toReformat="false" toShortenFQNames="true">
    <variable name="FragmentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
</templateSet>